// 所有颜色
@import '~@assets/styles/unit/color.scss';
// 自定义的样式
@import '~@assets/styles/public.scss';
// 补丁 base
@import '~@assets/styles/fixed/base.scss';
// 补丁 n-progress
@import '~@assets/styles/fixed/n-progress.scss';
// 动画
@import '~@assets/styles/animate/vue-transition.scss';
// 图标库
@import '~@assets/styles/icon/glyphicon.scss';
// 补丁 element
//@import '~@assets/styles/fixed/element.scss';

// 在这里写公用的class
// mixin等内容请在 public.scss 里书写
// 占位符
.#{$prefix}-place {
  width: 1px;
  height: 1px;
}

// flex布局方式：主属性
// 排列方向
// flex-direction: row | row-reverse | column | column-reverse;
// 换行
// flex-wrap: nowrap | wrap | wrap-reverse;
// 主轴上的对齐方式 水平
// justify-content: flex-start | flex-end | center | space-between | space-around;
// 交叉轴上如何对齐 垂直
// align-items: flex-start | flex-end | center | baseline | stretch;
// 多根轴线的对齐方式
// align-content: flex-start | flex-end | center | space-between | space-around | stretch;
// flex布局方式：子属性
// 排列顺序。数值越小，排列越靠前，默认为0。
// order: <integer>;
// 放大比例，默认为0，即如果存在剩余空间，也不放大。
// flex-grow: <number>;/* default 0 */
// 缩小比例，默认为1，即如果空间不足，该项目将缩小。
// flex-shrink: <number>;/* default 1 */
// 在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。
// flex-basis: <number> | auto;/* default auto */
// flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。
// flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ];
// 允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。
// align-self: auto | flex-start | flex-end | center | baseline | stretch;;
.#{$prefix}-flex-base {
  @extend %flex-base;
}
.#{$prefix}-flex-center {
  @extend %flex-base;
  align-items: center;
  justify-content: center;
}
.#{$prefix}-space-between {
  @extend %flex-base;
  align-items: center;
  justify-content: space-between;
}

// 对齐方式
.#{$prefix}-text-center {
  text-align: center;
}
.#{$prefix}-text-left {
  text-align: left;
}
.#{$prefix}-text-right {
  text-align: right;
}

// 浮动相关
.#{$prefix}-fl {
  float: left;
}
.#{$prefix}-fr {
  float: right;
}
.#{$prefix}-clearfix:before,
.#{$prefix}-clearfix:after {
  display: table;
  content: "";
}
.#{$prefix}-clearfix:after {
  clear: both
}

// 边距相关
$sizes: (0, 5, 10, 15, 20);

@for $index from 1 to 6 {
  .#{$prefix}-m-#{nth($sizes, $index)} { margin: #{nth($sizes, $index)}px !important; }
  .#{$prefix}-mt-#{nth($sizes, $index)} { margin-top: #{nth($sizes, $index)}px !important; }
  .#{$prefix}-mr-#{nth($sizes, $index)} { margin-right: #{nth($sizes, $index)}px !important; }
  .#{$prefix}-mb-#{nth($sizes, $index)} { margin-bottom: #{nth($sizes, $index)}px !important; }
  .#{$prefix}-ml-#{nth($sizes, $index)} { margin-left: #{nth($sizes, $index)}px !important; }

  .#{$prefix}-p-#{nth($sizes, $index)} { padding: #{nth($sizes, $index)}px !important; }
  .#{$prefix}-pt-#{nth($sizes, $index)} { padding-top: #{nth($sizes, $index)}px !important; }
  .#{$prefix}-pr-#{nth($sizes, $index)} { padding-right: #{nth($sizes, $index)}px !important; }
  .#{$prefix}-pb-#{nth($sizes, $index)} { padding-bottom: #{nth($sizes, $index)}px !important; }
  .#{$prefix}-pl-#{nth($sizes, $index)} { padding-left: #{nth($sizes, $index)}px !important; }
}

// 鼠标变小手
.#{$prefix}-pointer {
  @extend %select;
}
